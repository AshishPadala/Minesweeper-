//                                                        **** MINESWEEPER ****                                                                              //
//                                                             BY GROUP 7                                                                                    //
//                                            SRI HARSHINI BAPANAPALLI and ASHISH CHANDRA PADALA                                                             //

#include <stdio.h>
#include <stdlib.h>
#include<time.h>
#include <unistd.h>

#define FLUSH fflush(stdin)

void difficulty( void );
void beginner( void );
void intermediate( void );
void expert( void );
void custom(void);
void minefield_generator( void );
void print_minefield( void );
void guess( void );
void boom( void );
void print_final_minefield( void );
void win( void );
void play_again( void);
void game_over( void );

int x, y;
int row, column;
float diff;
int total_mines = 0;
int mines = 0;
int minefield[30][30];                                      
int blank_minefield[30][30];                                
int final_minefield[30][30]; 
clock_t begin;
double high_score=0.0;


int main()
{
    printf("\t\tWelcome to Minesweeper\n");
    int choice;
    printf("\t\t\t 1. Start game\n");
    printf("\t\t\t 2. Custom game\n");
    printf("\t\t\t 3. High score\n");
    printf("\t\t\t 4. exit\n");
    printf("Enter your choice:\n");
    scanf("%d", &choice);
    
    
    switch (choice)
	 {
        
        case 1:
		{
         difficulty();
         break;
        }
        case 2:  
		{
         custom();
         break;
        }
        case 3:
		{
	    printf("highscore is :%0.2f miliseconds", high_score);
	    play_again();
        }
		case 4:
        {
         exit(1);
        }
        default:  
        printf("wrong Input\n");
    }
    return 0;
    difficulty();
    return 0;
}

void difficulty( void )                                               //Function for slecting difficulty level //             
{
    diff = 0;
    while( (diff != 1) && (diff != 2) && (diff != 3))        
    {
        printf("\t\tChoose a difficulty level(1-3):");   
        scanf("%f", &diff);
        FLUSH;
        if( (diff != 1) && (diff != 2) && (diff != 3))
        {
            printf("\t\tPlease enter either 1, 2, 3\n");
        }
    }   
    
    begin = clock();
    if( diff == 1 )                                         
    {
        beginner();
    }
    else if( diff == 2 )
    {
        intermediate();
    }
    else if( diff == 3 )
    {
        expert();
    }
    else if( diff == 4 )
    {
        custom();
    }
    
}    
    
void beginner( void )                  // Gives the beginner grid mines //               
{
    row = 9;
    column = 9;
    total_mines = 10;
    minefield_generator();
    guess();
}

void intermediate( void )             // Gives the intermediate grid mines //                      
{
    row = 16;
    column = 16;
    total_mines = 40;
    minefield_generator();
    guess();
}

void expert( void )                    // Gives the expert grid mines //                    
{
    row = 16;
    column = 30;
    total_mines = 99;
    minefield_generator();
    guess();
}

void custom( void )                     // Function to be able to customize your own game //
{
    row = 0;
    column = 0;
    total_mines = 0;
    printf("\t\tPlease enter the size of the dimensions you want\n");
    printf("\t\tFirst value:\n");
    scanf("%d", &row);
    printf("\t\tSecond value:\n");
    scanf("%d", &column);
    printf("\t\tNumber of mines you want to assign to the board:\n");
    scanf("%d", &total_mines);
    minefield_generator();
    guess();
}

void minefield_generator( void )              // Function to generate mines//            
{
    int i = 0, j = 0;
    
    srand( time( NULL ) );
    
    
    while( j < column )                                          
    {
        while( i < row)
        {
            minefield[i][j] = '-';
            blank_minefield[i][j] = minefield[i][j];        
            final_minefield[i][j] = minefield[i][j];        
            i++;
        }
        i = 0;
        j++;
    }
    mines = 0;
    while( mines < total_mines )                            
    {
        i = rand()%(row);
        j = rand()%(column);
        if( minefield[i][j] != '*')                         
        {
            minefield[i][j] = '*';
            final_minefield[i][j] = minefield[i][j];
            mines++;
        }
    }
    i = 0;
    j = 0;

    while( j < column )                                          
    {
        while( i < row)
        {
            if( minefield[i][j] != '*')
            {
                minefield[i][j] = 0;
            }   
            if((minefield[i-1][j-1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i-1][j] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i][j-1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i-1][j+1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i+1][j-1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i+1][j] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i][j+1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            if((minefield[i+1][j+1] == '*') && (minefield[i][j] != '*'))
            {
                minefield[i][j]++;
            }
            i++;
        }
        i = 0;
        j++;
    }
    i = 0;
    j = 0;
}

void print_minefield(void)                               // Function to print the minefields //   
{
    int i = 0, j = 0, z = 0;
    while( z < row )                                        
    {
        if( z == 0 )
        {
            printf("\t");
        }
        printf("|%d|\t", z);
        z++;
    }
    printf("\n\n");

    while( j < column )                                                              
    {   
        printf("|%d|\t", j);
        while( i < row)
        {
            if( blank_minefield[i][j] == '-')
            {
                printf("|%c|\t", blank_minefield[i][j]);

            }
            else if( minefield[i][j] == 0 )                
            {
                blank_minefield[i][j] = 'B';                
                printf("|%c|\t", blank_minefield[i][j]);
            }
            else
            {
                printf("|%d|\t", blank_minefield[i][j]);

            }
            i++;
        }
        printf("\n");
        i = 0;
        j++;
    }
}

void guess( void )                                          // Function to enter the coordinates of desired place //
{
    int q = 0, i=0, j=0, match=0;
    print_minefield();
    while( j < column )                                       
    {
        while( i < row )
        {
            if(minefield[i][j] == blank_minefield[i][j])
            {
                match++;
            }
            i++;
        }
        i = 0;
        j++;
    }
    if( match == (( row * column ) - total_mines))                
    {
        win();
    }
    printf("\nEnter the x value, then a space, then the y value:");
    scanf("%d %d", &x, &y);                                 
    FLUSH;
    if( (x >= row) || (x < 0) || (y < 0) || (y >= column) )
    {
        printf("\nPlease enter a value inside the grid\n");
        guess();
    }
    if( minefield[x][y] == '*' )                      
    {
        boom();
    }
    if( blank_minefield[x][y] != '-' )
    {
        printf("\nPlease enter a value that has not already been entered\n");
        guess();
    }

    else                                                
    {
        blank_minefield[x][y] = minefield[x][y];
        if( minefield[x][y] == 0 )
        {
            if( minefield[x-1][y-1] == 0 )
            {
                blank_minefield[x-1][y] = minefield[x-1][y];
            }
            if( minefield[x-1][y] == 0 )
            {
                blank_minefield[x-1][y] = minefield[x-1][y];
            }
            if( minefield[x][y-1] == 0 )
            {
                blank_minefield[x][y-1] = minefield[x][y-1];
            }
            if( minefield[x-1][y+1] == 0 )
            {
                blank_minefield[x-1][y+1] = minefield[x-1][y+1];
            }
            if( minefield[x+1][y-1] == 0 )
            {
                blank_minefield[x+1][y-1] = minefield[x+1][y-1];
            }
            if( minefield[x+1][y] == 0 )
            {
                blank_minefield[x+1][y] = minefield[x+1][y];
            }
            if( minefield[x][y+1] == 0 )
            {
                blank_minefield[x][y+1] = minefield[x][y+1];
            }
            if( minefield[x+1][y+1] == 0 )
            {
                blank_minefield[x+1][y+1] = minefield[x+1][y+1];
            }
        }
        guess();
    }
}

void boom( void )                                                    
{
    print_final_minefield();
    
	clock_t end = clock();
	
	double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
	if (high_score==0.0)
	{
	high_score=time_spent;
    }
    else if(high_score!=0.0 && high_score <time_spent)
    {
    	high_score=time_spent;
	}
	else 
	{
	}

    printf("Time :%0.2f miliseconds",time_spent);
    printf("\n\t\tYou hit a mine at %d,%d\n\t\tYOU LOSE!!!!", x, y);
    play_again();
}

void print_final_minefield( void )                    
{
    int i = 0, j = 0, z = 0;
    while( z < row )
    {
        if( z == 0 )
        {
            printf("\t");
        }
        printf("|%d|\t", z);
        z++;
    }
    printf("\n\n");

    while( j < column )
    {   
        printf("|%d|\t", j);
        while( i < row)
        {
            printf("|%c|\t", final_minefield[i][j]);
            i++;
        }
        printf("\n");
        i = 0;
        j++;
    }
}

void win( void )                                  
{
	clock_t end = clock();
	
	double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
	if (high_score==0.0)
	{
	high_score=time_spent;
    }
    else if(high_score!=0.0 && high_score <time_spent)
    {
    	high_score=time_spent;
	}
	else 
	{
	}

    printf("Time :%0.2f miliseconds",time_spent);
    printf("\n\n\n\t\t\tYOU WIN!!!!!\n\n\n");
    play_again();
}

void play_again( void )                                           // Function to able to ply the game again after a lose //       
{
    char option[2];
    printf("\n\t\tWould you like to play again(Y/N)?:");
    scanf("%c", &option[0]);
    FLUSH;
    if((option[0] == 'Y') || (option[0] == 'y'))        
    {
        int choice;
    printf("\t\t\t 1. Start game\n");
    printf("\t\t\t 2. Custom game\n");
    printf("\t\t\t 3. High score\n");
    printf("\t\t\t 4. exit\n");
    printf("Enter your choice:\n");
    scanf("%d", &choice);
    
    
    switch (choice)
	 {
        
        case 1:
		{
         difficulty();
         break;
        }
        case 2:  
		{
         custom();
         break;
        }
        case 3:
		{
		printf("highscore is :%0.2f miliseconds", high_score);
		play_again();
        }
		case 4:
        {
         exit(1);
        }
        default:
        printf("wrong Input\n");
    }
  }
	else if( (option[0] == 'N') || (option[0] == 'n'))
    {
        game_over();
    }
    else
    {
        printf("Please enter either Y or N");
        play_again();
    }
}

void game_over( void )                    // Function for end of game //
{
    printf("\n\n\t\tGame Over");
     exit(1);
}
